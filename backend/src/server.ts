import 'dotenv/config'
import Fastify from 'fastify'
import cors from '@fastify/cors'
import { logger } from './utils/logger'
import { healthRoutes } from './routes/health'
import { servicesRoutes } from './routes/services'
import { anamnesisRoutes } from './routes/anamnesis'
import { plansRoutes } from './routes/plans'
import { configRoutes } from './routes/config'
import { usersRoutes } from './routes/users'
import { appointmentsRoutes } from './routes/appointments'
import { vouchersRoutes } from './routes/vouchers'
import { scheduleRoutes } from './routes/schedule'
import { subscriptionsRoutes } from './routes/subscriptions'
import { testimonialRoutes } from './routes/testimonials'
import { stripeRoutes } from './routes/stripe'
import { notificationRoutes } from './routes/notifications'
import { setupCronJobs } from './utils/cron'

const PORT = Number(process.env.PORT) || 3333
const HOST = '0.0.0.0'

// Criando a inst√¢ncia do Fastify
const app = Fastify({
  logger: false // Desabilitamos o logger padr√£o para usar nosso custom logger
})

// Fun√ß√£o principal para iniciar o servidor
async function start() {
  try {
    logger.info('üöÄ Iniciando servidor Charme & Bela API...')
    
    // Configurando CORS
    await app.register(cors, {
      origin: process.env.FRONTEND_URL || 'http://localhost:3000',
      credentials: true,
      methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS']
    })
    logger.success('CORS configurado com m√©todos: GET, POST, PUT, DELETE, PATCH')
    
    // Registrando rotas
    logger.info('üìù Registrando rotas...')
    await app.register(healthRoutes)
    await app.register(servicesRoutes)
    await app.register(anamnesisRoutes)
    await app.register(plansRoutes)
    await app.register(configRoutes)
    await app.register(usersRoutes)
    await app.register(appointmentsRoutes)
    await app.register(vouchersRoutes)
    await app.register(scheduleRoutes)
    await app.register(subscriptionsRoutes)
    await app.register(testimonialRoutes)
    await app.register(stripeRoutes)
    await app.register(notificationRoutes)
    logger.success('Rotas registradas com sucesso')
    
    // Iniciando servidor
    await app.listen({ port: PORT, host: HOST })
    
    // Inicia cron jobs
    setupCronJobs()
    
    console.log('\n' + '='.repeat(50))
    logger.success(`Servidor rodando em http://localhost:${PORT}`)
    logger.info(`Ambiente: ${process.env.NODE_ENV}`)
    logger.info(`Frontend URL: ${process.env.FRONTEND_URL}`)
    console.log('='.repeat(50) + '\n')
    
    logger.info('üìã Rotas dispon√≠veis:')
    console.log('\n  üè• Health & Config:')
    console.log('  - GET    /health                - Health check')
    console.log('  - GET    /config                - Buscar configura√ß√µes')
    console.log('  - PUT    /config                - Atualizar configura√ß√µes')
    
    console.log('\n  üíé Planos:')
    console.log('  - GET    /plans                     - Listar planos')
    console.log('  - GET    /plans/:id                 - Buscar plano por ID')
    console.log('  - GET    /plans/tier/:tier          - Buscar plano por tier')
    console.log('  - POST   /plans                     - Criar plano')
    console.log('  - PUT    /plans/:id                 - Atualizar plano')
    console.log('  - PUT    /plans/:id/services/add    - Adicionar servi√ßos ao plano')
    console.log('  - PUT    /plans/:id/services/remove - Remover servi√ßos do plano')
    console.log('  - PUT    /plans/:id/services/set    - Substituir servi√ßos do plano')
    
    console.log('\n  üíÜ Servi√ßos:')
    console.log('  - GET    /services              - Listar servi√ßos')
    console.log('  - GET    /services/:id          - Buscar servi√ßo')
    console.log('  - POST   /services              - Criar servi√ßo')
    
    console.log('\n  üë• Usu√°rios:')
    console.log('  - GET    /users                     - Listar usu√°rios')
    console.log('  - GET    /users/birthdays           - Aniversariantes do m√™s')
    console.log('  - GET    /users/firebase/:uid       - Buscar por Firebase UID')
    console.log('  - GET    /users/:id                 - Buscar usu√°rio')
    console.log('  - POST   /users                     - Criar usu√°rio')
    console.log('  - PUT    /users/:id                 - Atualizar usu√°rio')
    console.log('  - DELETE /users/:id                 - Desativar usu√°rio')
    
    console.log('\n  üìã Anamneses:')
    console.log('  - GET    /anamnesis                - Listar anamneses')
    console.log('  - GET    /anamnesis/user/:userId   - Buscar anamnese de usu√°rio')
    console.log('  - POST   /anamnesis                - Criar anamnese')
    console.log('  - PUT    /anamnesis/user/:userId   - Atualizar anamnese')
    console.log('  - DELETE /anamnesis/user/:userId   - Deletar anamnese')
    
    console.log('\n  üìÖ Agendamentos:')
    console.log('  - GET    /appointments                - Listar agendamentos')
    console.log('  - GET    /appointments/:id            - Buscar agendamento')
    console.log('  - POST   /appointments                - Criar agendamento')
    console.log('  - PUT    /appointments/:id/confirm    - Confirmar agendamento')
    console.log('  - PUT    /appointments/:id/cancel     - Cancelar agendamento')
    console.log('  - PUT    /appointments/:id/reschedule - Reagendar')
    
    console.log('\n  üéÅ Vouchers:')
    console.log('  - GET    /vouchers                        - Listar vouchers')
    console.log('  - GET    /vouchers/user/:userId           - Vouchers do usu√°rio')
    console.log('  - GET    /vouchers/:id                    - Buscar voucher')
    console.log('  - POST   /vouchers                        - Criar voucher')
    console.log('  - POST   /vouchers/validate               - Validar e calcular desconto')
    console.log('  - POST   /vouchers/:id/activate-free-month - Ativar m√™s gr√°tis')
    console.log('  - PUT    /vouchers/:id/use                - Usar voucher')
    console.log('  - DELETE /vouchers/:id                    - Remover voucher')
    
    console.log('\n  ‚è∞ Hor√°rios:')
    console.log('  - GET    /schedule/available       - Hor√°rios dispon√≠veis')
    console.log('  - GET    /schedule/manager         - Hor√°rios de funcionamento')
    console.log('  - POST   /schedule/manager         - Definir hor√°rios')
    console.log('  - GET    /schedule/overrides       - Listar exce√ß√µes')
    console.log('  - POST   /schedule/overrides       - Criar exce√ß√£o')
    console.log('  - DELETE /schedule/overrides/:date - Remover exce√ß√£o')
    
    console.log('\n  üí≥ Assinaturas:')
    console.log('  - GET    /subscriptions                - Listar assinaturas')
    console.log('  - GET    /subscriptions/user/:userId   - Assinatura do usu√°rio')
    console.log('  - POST   /subscriptions                - Criar assinatura')
    console.log('  - PUT    /subscriptions/:userId/cancel - Cancelar assinatura')
    console.log('  - PUT    /subscriptions/:userId/pause  - Pausar assinatura')
    console.log('  - PUT    /subscriptions/:userId/reactivate - Reativar')
    
    console.log('\n  üí∞ Stripe (Pagamentos):')
    console.log('  - POST   /stripe/create-checkout-session  - Checkout assinatura')
    console.log('  - POST   /stripe/create-payment-session   - Pagamento avulso (cart√£o)')
    console.log('  - POST   /stripe/create-portal-session    - Portal do cliente')
    console.log('  - GET    /stripe/payment-methods/:userId  - M√©todos de pagamento')
    console.log('  - GET    /stripe/payment-history/:userId  - Hist√≥rico')
    console.log('  - GET    /stripe/monthly-revenue          - Receita do m√™s (Admin)')
    console.log('  - POST   /stripe/webhook                  - Webhook Stripe')
    
    console.log('\n  üîî Notifica√ß√µes:')
    console.log('  - GET    /notifications                    - Listar notifica√ß√µes')
    console.log('  - GET    /notifications/unread-count       - Contar n√£o lidas')
    console.log('  - GET    /notifications/:id                - Buscar notifica√ß√£o')
    console.log('  - POST   /notifications                    - Criar notifica√ß√£o')
    console.log('  - PUT    /notifications/:id/read           - Marcar como lida')
    console.log('  - PUT    /notifications/mark-all-read      - Marcar todas como lidas')
    console.log('  - DELETE /notifications/:id                - Deletar notifica√ß√£o')
    console.log('  - DELETE /notifications/clear-all          - Limpar todas')
    console.log('  - DELETE /notifications/clear-expired      - Limpar expiradas')
    console.log('')
    
  } catch (error) {
    logger.error('Erro ao iniciar o servidor:', error)
    process.exit(1)
  }
}

// Graceful shutdown
process.on('SIGINT', async () => {
  logger.warning('Recebido sinal de interrup√ß√£o, encerrando servidor...')
  await app.close()
  logger.success('Servidor encerrado com sucesso')
  process.exit(0)
})

// Iniciando o servidor
start()

